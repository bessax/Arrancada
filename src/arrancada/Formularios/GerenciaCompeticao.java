/*
 * GerenciaCompeticao.java
 *
 * Created on 14 de Agosto de 2007, 09:11
 */

package arrancada.Formularios;

import arrancada.Util.ValidarCodigoCategoria;
import arrancada.Util.Limpar;
import arrancada.Dao.ServicoBDAO;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author  monitor
 */
public class GerenciaCompeticao extends javax.swing.JDialog {
    
    /** Creates new form GerenciaCompeticao */
    public GerenciaCompeticao(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        centralizar();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelCodigo = new javax.swing.JLabel();
        jLabelNome = new javax.swing.JLabel();
        jLabelData = new javax.swing.JLabel();
        jLabelUF = new javax.swing.JLabel();
        jTextFieldCodigo = new javax.swing.JTextField();
        jTextFieldNome = new javax.swing.JTextField();
        jLabelCidade = new javax.swing.JLabel();
        jTextFieldCidade = new javax.swing.JTextField();
        jButtonConfirmar = new javax.swing.JButton();
        jButtonFechar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        dateChooserComboData = new datechooser.beans.DateChooserCombo();
        jButtonConsultaCompeticao = new javax.swing.JButton();
        jComboBoxEstado = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Competição");
        setName("GerenciaCompeticao"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabelCodigo.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelCodigo.setText("Código:");

        jLabelNome.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelNome.setText("Nome:");

        jLabelData.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelData.setText("Data:");

        jLabelUF.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelUF.setText("UF:");

        jTextFieldCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldCodigoFocusLost(evt);
            }
        });

        jLabelCidade.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelCidade.setText("Cidade:");

        jButtonConfirmar.setFont(new java.awt.Font("Tahoma", 1, 11));
        jButtonConfirmar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrancada.Imagens/14.png"))); // NOI18N
        jButtonConfirmar.setText("Confirmar");
        jButtonConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarActionPerformed(evt);
            }
        });

        jButtonFechar.setFont(new java.awt.Font("Tahoma", 1, 11));
        jButtonFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrancada.Imagens/06.png"))); // NOI18N
        jButtonFechar.setText("Fechar");
        jButtonFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFecharActionPerformed(evt);
            }
        });

        jButtonCancelar.setFont(new java.awt.Font("Tahoma", 1, 11));
        jButtonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrancada.Imagens/15.png"))); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        dateChooserComboData.setCurrentView(new datechooser.view.appearance.AppearancesList("Swing",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    dateChooserComboData.setFormat(2);

    jButtonConsultaCompeticao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrancada.Imagens/botaoconsulta.png"))); // NOI18N
    jButtonConsultaCompeticao.setFocusable(false);
    jButtonConsultaCompeticao.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonConsultaCompeticaoActionPerformed(evt);
        }
    });

    jComboBoxEstado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AC", "AL", "AM", "AP", "BA", "CE", "DF", "ES", "MA", "MG", "MS", "MT", "PA", "PB", "PE", "PI", "PR", "RJ", "RN", "RO", "RR", "RS", "SC", "SE", "SP", "TO" }));

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(jLabelNome)
                        .add(jLabelCodigo)
                        .add(jLabelData))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                            .add(jTextFieldCodigo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 51, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jButtonConsultaCompeticao, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(layout.createSequentialGroup()
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(dateChooserComboData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jTextFieldNome, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)))
                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                    .add(jLabelCidade)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jTextFieldCidade, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                    .add(jLabelUF)
                    .add(2, 2, 2)
                    .add(jComboBoxEstado, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                    .add(jButtonConfirmar)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jButtonCancelar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jButtonFechar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelCodigo)
                    .add(jTextFieldCodigo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jButtonConsultaCompeticao, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(jLabelNome)
                .add(jTextFieldNome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(12, 12, 12)
                    .add(jLabelData))
                .add(layout.createSequentialGroup()
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(dateChooserComboData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelUF)
                    .add(jComboBoxEstado, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelCidade)
                    .add(jTextFieldCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jButtonConfirmar)
                .add(jButtonCancelar)
                .add(jButtonFechar))
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
    if(evt.getOppositeWindow() instanceof Competicao)
    {
        jButtonConsultaCompeticao.setVisible(true);
        jTextFieldNome.setEditable(true);
        dateChooserComboData.setEnabled(true);
        jTextFieldCidade.setEditable(true);
        jComboBoxEstado.setEditable(true);
        retornoBotao(clikmenu, 0);
        if( (this.getTitle().equals("Alteração de Competição")) || (this.getTitle().equals("Exclusão de Competição")))
        {
            try
            {
                ResultSet rs = servico.selectCompeticao(String.valueOf(Integer.parseInt(codigo)), "1");
                if(rs.next() != false)
                {
                    jTextFieldCodigo.setText(codigo);
                    codigo = "";
                    jTextFieldCodigo.setEnabled(false);
                    jTextFieldNome.setText(rs.getString(2));
                    Date data = rs.getDate(3);
                    Calendar calendar = new GregorianCalendar();
                    //não sei porque mais o mês tem que ser 1 a menos, se jogar o mes certo na hora de apresentar aparece 1 a mais
                    calendar.set(Calendar.MONTH,Integer.parseInt(rs.getString(3).substring(5, 7))-1);
                    calendar.set(Calendar.YEAR, Integer.parseInt(rs.getString(3).substring(0, 4)));
                    calendar.set(Calendar.DAY_OF_MONTH, Integer.parseInt(rs.getString(3).substring(8, 10)));
                    dateChooserComboData.setSelectedDate(calendar);
                    jTextFieldCidade.setText(rs.getString(5));
                    jComboBoxEstado.setSelectedItem(rs.getString(4));
                    jTextFieldNome.requestFocus();
                }
            }
            catch (SQLException ex) 
            {
                Logger.getLogger(GerenciaVeiculo.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(this.getTitle().equals("Exclusão de Competição"))
            {
                jTextFieldNome.setEditable(false);
                dateChooserComboData.setEnabled(false);
                jTextFieldCidade.setEditable(false);
                jComboBoxEstado.setEditable(false);
            }
        }
        else if (this.getTitle().equals("Inclusão de Competição") )
        {
            jButtonConsultaCompeticao.setVisible(false);
            String zeros = "0000"+servico.proximoCodigo("competicao");
            jTextFieldCodigo.setText(zeros.substring(zeros.length()-4));
            jTextFieldCodigo.setEnabled(false);
            jTextFieldNome.requestFocus();
        }
        else if (this.getTitle().equals("Exclusão de Competição") )
        {
            jTextFieldCodigo.setText(codigo);
            codigo = "";
        }
    }
}//GEN-LAST:event_formWindowActivated

/* Metodo para saber em qual componente ira retornar o focus, apartir do menu
 * e do botao que foi acionado e neste metodo chama o metodo de Limpar
 */   
private void retornoBotao(String menu, int botao)
{
    limpar.limpajTextField(jTextFieldNome);
    dateChooserComboData.setSelectedDate(Calendar.getInstance());
    limpar.limpajTextField(jTextFieldCidade);
    if( (menu.equals("0")) && ( (botao == 0) || (botao == 1) ) )
    {        
        jTextFieldNome.requestFocus();
    }
    else if ( (menu.equals("1")) || (menu.equals("2") ) ) 
    {
        limpar.limpajTextField(jTextFieldCodigo);
        jTextFieldCodigo.setEnabled(true);
        jTextFieldCodigo.requestFocus();
    }
}


private void jButtonConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarActionPerformed
    if(jTextFieldCodigo.getText().equals(""))
    {
        jTextFieldCodigo.requestFocus();
        JOptionPane.showMessageDialog(null, "Compo código não pode ficar vazio", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    else
    {
        if(jTextFieldNome.getText().equals(""))
        {
            jTextFieldNome.requestFocus();
            JOptionPane.showMessageDialog(null, "Compo nome não pode ficar vazio", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else if(jTextFieldCidade.getText().equals(""))
        {
            jTextFieldCidade.requestFocus();
            JOptionPane.showMessageDialog(null, "Compo Cidade não pode ficar vazio", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else if(this.getTitle().equals("Inclusão de Competição"))
        {
            servico.insertCompeticao(jTextFieldCodigo.getText(), jTextFieldNome.getText(), dateChooserComboData.getText(), jComboBoxEstado.getSelectedItem().toString(), jTextFieldCidade.getText());
            String zeros = "0000"+servico.proximoCodigo("competicao");
            jTextFieldCodigo.setText(zeros.substring(zeros.length()-4));
            jTextFieldNome.requestFocus();
            limparCampos();
        }
        else if(this.getTitle().equals("Alteração de Competição"))
        {
            int retorno = servico.updateCompeticao(jTextFieldCodigo.getText(), jTextFieldNome.getText().toUpperCase(), dateChooserComboData.getText(), jComboBoxEstado.getSelectedItem().toString(), jTextFieldCidade.getText().toUpperCase());
            if(retorno == 1)
            {
                retornoBotao(clikmenu, 1);
                codigo = "";
                JOptionPane.showMessageDialog(null, "Competição Alterada com Sucesso", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "pani", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        else if(this.getTitle().equals("Exclusão de Competição"))
        {
            ResultSet rs = null;
            try
            {
                //selecionar competicao para verificar se pode excluir ou não)
                rs = servico.selectPuxada(jTextFieldCodigo.getText(), "", "", "5");
                if(rs.next() == true)
                {
                    JOptionPane.showMessageDialog(this, "Competiçao não pode ser Excluida. Existe uma puxada vinculada a essa Competição.","Mensagem", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            catch(SQLException ex) 
            {
                Logger.getLogger(ServicoBDAO.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            finally
            {
                    try 
                    {
                        rs.close();
                    } 
                    catch (SQLException ex) 
                    {
                        Logger.getLogger(GerenciaCategoria.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }
            
            if(!verificarCompetidor())
            {
                JOptionPane.showMessageDialog(this, "Competiçao não pode ser Excluida. Existe um Competidor vinculado a essa Competição.","Mensagem", JOptionPane.ERROR_MESSAGE);
                return;
            }
            int retorno = servico.deleteCompeticao(Integer.parseInt(jTextFieldCodigo.getText()));
            if(retorno == 1)
            {
                retornoBotao(clikmenu, 1);
                JOptionPane.showMessageDialog(null, "Competiçao Excluída com Sucesso", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Competiçao nao foi Excluída", "Mensagem", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}//GEN-LAST:event_jButtonConfirmarActionPerformed

private void jTextFieldCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldCodigoFocusLost
    if (evt.getOppositeComponent() instanceof JButton || clicouBotaoPesquisa == 1)
    {
        clicouBotaoPesquisa = 0;
        return;
    }
    else
    {
        try 
        {
            String zeros = "0000" + jTextFieldCodigo.getText().trim();
            jTextFieldCodigo.setText(zeros.substring(zeros.length() - 4));
            int codformatado = Integer.parseInt(jTextFieldCodigo.getText().trim());
            ResultSet rs = servico.selectCompeticao(Integer.toString(codformatado), "1");
            if ((rs.next() == false) || (rs == null)) 
            {
                jTextFieldCodigo.setEnabled(true);
                rs.close();
                limpar.limpajTextField(jTextFieldCodigo);
                jTextFieldCodigo.requestFocus();
                JOptionPane.showMessageDialog(null,"Código não Cadastrado","Atenção",JOptionPane.INFORMATION_MESSAGE);
            }
            else
            {
                jTextFieldCodigo.setEnabled(false);
                jTextFieldNome.setText(rs.getString(2));
                //SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                //jFormattedTextFieldData.setValue(formato.format(rs.getDate(3)));
                Date data = rs.getDate(3);
                Calendar calendar = new GregorianCalendar();
                //não sei porque mais o mês tem que ser 1 a menos, se jogar o mes certo na hora de apresentar aparece 1 a mais
                calendar.set(Calendar.MONTH,Integer.parseInt(rs.getString(3).substring(5, 7))-1);
                calendar.set(Calendar.YEAR, Integer.parseInt(rs.getString(3).substring(0, 4)));
                calendar.set(Calendar.DAY_OF_MONTH, Integer.parseInt(rs.getString(3).substring(8, 10)));
                dateChooserComboData.setSelectedDate(calendar);
                jTextFieldCidade.setText(rs.getString(5));
                jComboBoxEstado.setSelectedItem(rs.getString(4));
                if(this.getTitle().equals("Exclusão de Competição"))
                {
                    dateChooserComboData.setEnabled(false);
                }
            }
        }
        catch (SQLException ex) 
        {
            Logger.getLogger(ValidarCodigoCategoria.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}//GEN-LAST:event_jTextFieldCodigoFocusLost

private void jButtonFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFecharActionPerformed
    limparCampos();
    dispose();
}//GEN-LAST:event_jButtonFecharActionPerformed

private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
     retornoBotao(clikmenu, 1);
}//GEN-LAST:event_jButtonCancelarActionPerformed

private void jButtonConsultaCompeticaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaCompeticaoActionPerformed
    clicouBotaoPesquisa = 1;
    retornoBotao(clikmenu, 1);
    dateChooserComboData.setEnabled(true);
    ConsultaCompeticao consultaCompeticao = new ConsultaCompeticao(null, true);
    consultaCompeticao.setVisible(true);
    if(consultaCompeticao.codigo != -1)
    {
        jTextFieldCodigo.setText(Integer.toString(consultaCompeticao.codigo));
        jTextFieldCodigo.transferFocus();
    }
}//GEN-LAST:event_jButtonConsultaCompeticaoActionPerformed

//criado para verificar se pode excluir a competição
private boolean verificarCompetidor()
{
    ResultSet rs = null;
    try
    {
        //selecionar competicao para verificar se pode excluir ou não)
        rs = servico.selectCompetidor(jTextFieldCodigo.getText(),"", "", "10");
        if(rs.next() == true)
        {
            return false;
        }
        else
        {
            return true;
        }
    }
    catch(SQLException ex) 
    {
        Logger.getLogger(ServicoBDAO.class.getName()).log(Level.SEVERE, null, ex);
        return false;
    }
    finally
    {
            try 
            {
                rs.close();
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(GerenciaCategoria.class.getName()).log(Level.SEVERE, null, ex);
                return false;
            }
    }
}

private void limparCampos()
{
    jTextFieldNome.setText("");
    dateChooserComboData.setSelectedDate(Calendar.getInstance());
    jTextFieldCidade.setText("");
}

   private void centralizar(){  
      /* Função para centralizar janela na tela */  
       Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();  
       Dimension frameSize = getSize();  
       setLocation(new Point((screenSize.width - frameSize.width) / 2,  
                             (screenSize.height - frameSize.width) / 2));  
    }
   
public DefaultFormatterFactory setFormatoData() {  
    MaskFormatter mascara = null;  
    try {  
        mascara = new MaskFormatter("##/##/####");
        mascara.setPlaceholderCharacter('_');
        } catch (ParseException pe) { }  
        DefaultFormatterFactory factory = new DefaultFormatterFactory(mascara, mascara);  
        return factory;  
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GerenciaCompeticao dialog = new GerenciaCompeticao(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private datechooser.beans.DateChooserCombo dateChooserComboData;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonConfirmar;
    private javax.swing.JButton jButtonConsultaCompeticao;
    private javax.swing.JButton jButtonFechar;
    private javax.swing.JComboBox jComboBoxEstado;
    private javax.swing.JLabel jLabelCidade;
    private javax.swing.JLabel jLabelCodigo;
    private javax.swing.JLabel jLabelData;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JLabel jLabelUF;
    private javax.swing.JTextField jTextFieldCidade;
    private javax.swing.JTextField jTextFieldCodigo;
    private javax.swing.JTextField jTextFieldNome;
    // End of variables declaration//GEN-END:variables

    /* Variavel criada para saber em qual menu foi clicado, para poder 
     * destinar o focu do campo apos clicar em confirma
     */
    public String clikmenu;  
    Limpar limpar = new Limpar();
    ServicoBDAO servico = new ServicoBDAO();
    public String codigo;
    private int clicouBotaoPesquisa = 0;
}
