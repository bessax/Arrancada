/*
 * GerenciaCompetidor.java
 *
 * Created on 14 de Agosto de 2007, 09:17
 */

package arrancada.Formularios;

import arrancada.Util.Limpar;
import arrancada.Util.FormPesquisa;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import arrancada.Dao.ServicoBDAO;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author  monitor
 */
public class GerenciaCompetidor extends javax.swing.JDialog {
    
    /** Creates new form GerenciaCompetidor */
    public GerenciaCompetidor(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        centralizar();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelCodigo = new javax.swing.JLabel();
        jLabelCompeticao = new javax.swing.JLabel();
        jLabelCategoria = new javax.swing.JLabel();
        jLabelPiloto = new javax.swing.JLabel();
        jLabelVeiculo = new javax.swing.JLabel();
        jTextFieldCodigo = new javax.swing.JTextField();
        jComboBoxCompeticao = new javax.swing.JComboBox();
        jComboBoxCategoria = new javax.swing.JComboBox();
        jTextFieldPiloto = new javax.swing.JTextField();
        jTextFieldVeiculo = new javax.swing.JTextField();
        jTextFieldPilotoNome = new javax.swing.JTextField();
        jTextFieldVeiculoNome = new javax.swing.JTextField();
        jLabelPlaca = new javax.swing.JLabel();
        jTextFieldPlaca = new javax.swing.JTextField();
        jButtonConfirmar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jButtonFechar = new javax.swing.JButton();
        jButtonConsultaPiloto = new javax.swing.JButton();
        jButtonConsultaVeiculo = new javax.swing.JButton();
        jButtonConsultaCompetidor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Competidor");
        setModal(true);
        setName("GerenciaCompetidor"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabelCodigo.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelCodigo.setText("Número Carro:");

        jLabelCompeticao.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelCompeticao.setText("Competição:");

        jLabelCategoria.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelCategoria.setText("Categoria:");

        jLabelPiloto.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelPiloto.setText("Piloto:");

        jLabelVeiculo.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelVeiculo.setText("Veículo:");

        jTextFieldCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldCodigoFocusLost(evt);
            }
        });

        jComboBoxCompeticao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecionar Competição" }));

        jComboBoxCategoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecionar Categoaria" }));

        jTextFieldPiloto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldPilotoFocusLost(evt);
            }
        });
        jTextFieldPiloto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldPilotoKeyPressed(evt);
            }
        });

        jTextFieldVeiculo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldVeiculoFocusLost(evt);
            }
        });
        jTextFieldVeiculo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldVeiculoKeyPressed(evt);
            }
        });

        jTextFieldPilotoNome.setEditable(false);
        jTextFieldPilotoNome.setFocusable(false);

        jTextFieldVeiculoNome.setEditable(false);
        jTextFieldVeiculoNome.setFocusable(false);

        jLabelPlaca.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelPlaca.setText("Placa");

        jButtonConfirmar.setFont(new java.awt.Font("Tahoma", 1, 11));
        jButtonConfirmar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrancada.Imagens/14.png"))); // NOI18N
        jButtonConfirmar.setText("Confirmar");
        jButtonConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarActionPerformed(evt);
            }
        });

        jButtonCancelar.setFont(new java.awt.Font("Tahoma", 1, 11));
        jButtonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrancada.Imagens/15.png"))); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButtonFechar.setFont(new java.awt.Font("Tahoma", 1, 11));
        jButtonFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrancada.Imagens/06.png"))); // NOI18N
        jButtonFechar.setText("Fechar");
        jButtonFechar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonFecharMouseClicked(evt);
            }
        });

        jButtonConsultaPiloto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrancada.Imagens/botaoconsulta.png"))); // NOI18N
        jButtonConsultaPiloto.setFocusable(false);
        jButtonConsultaPiloto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaPilotoActionPerformed(evt);
            }
        });

        jButtonConsultaVeiculo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrancada.Imagens/botaoconsulta.png"))); // NOI18N
        jButtonConsultaVeiculo.setFocusable(false);
        jButtonConsultaVeiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaVeiculoActionPerformed(evt);
            }
        });

        jButtonConsultaCompetidor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrancada.Imagens/botaoconsulta.png"))); // NOI18N
        jButtonConsultaCompetidor.setFocusable(false);
        jButtonConsultaCompetidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaCompetidorActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabelCodigo)
                            .add(jLabelCompeticao)
                            .add(jLabelCategoria)
                            .add(jLabelVeiculo)
                            .add(jLabelPiloto)
                            .add(jLabelPlaca))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jTextFieldPlaca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jTextFieldPiloto, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                                    .add(jTextFieldVeiculo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jButtonConsultaPiloto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jButtonConsultaVeiculo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jTextFieldVeiculoNome, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                                    .add(jTextFieldPilotoNome, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)))
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxCategoria, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxCompeticao, 0, 174, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(jTextFieldCodigo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButtonConsultaCompetidor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(80, 80, 80)
                        .add(jButtonConfirmar)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonCancelar)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonFechar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabelCodigo)
                        .add(jTextFieldCodigo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jButtonConsultaCompetidor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabelCompeticao)
                    .add(jComboBoxCompeticao, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelCategoria)
                    .add(jComboBoxCategoria, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jTextFieldPiloto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jTextFieldPilotoNome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jLabelPiloto))
                    .add(jButtonConsultaPiloto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jLabelVeiculo)
                                .add(jTextFieldVeiculo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jButtonConsultaVeiculo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabelPlaca)
                            .add(jTextFieldPlaca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jTextFieldVeiculoNome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 11, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonFechar)
                    .add(jButtonCancelar)
                    .add(jButtonConfirmar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jTextFieldPilotoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPilotoKeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_ENTER)
    {
        jTextFieldPiloto.setText(formPesquida.pesquisa("Piloto"));
        formPesquida.valida(jTextFieldPiloto);
    }
    else
    {
        if(evt.getKeyCode() == KeyEvent.VK_F12)
        {
            ConsultaPiloto consultaPiloto = new ConsultaPiloto(null, true);
            consultaPiloto.setVisible(true);
            jTextFieldPiloto.setText(Integer.toString(consultaPiloto.codigo));
            jTextFieldPiloto.transferFocus();
        }
    }
}//GEN-LAST:event_jTextFieldPilotoKeyPressed

private void jTextFieldVeiculoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldVeiculoKeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_ENTER)
    {
        jTextFieldVeiculo.setText(formPesquida.pesquisa("Veiculo"));
        formPesquida.valida(jTextFieldVeiculo);
    }
    else
    {
        if(evt.getKeyCode() == KeyEvent.VK_F12)
        {
            ConsultaVeiculo consultaVeiculo = new ConsultaVeiculo(null, true);
            consultaVeiculo.setVisible(true);
            jTextFieldVeiculo.setText(Integer.toString(consultaVeiculo.codigo));
            jTextFieldVeiculo.transferFocus();
        }
    }
}//GEN-LAST:event_jTextFieldVeiculoKeyPressed

private void jTextFieldVeiculoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldVeiculoFocusLost
    if (evt.getOppositeComponent() instanceof JOptionPane || evt.getOppositeComponent() instanceof JButton || clicouBotaoPesquisa == 1)
    {
        clicouBotaoPesquisa = 0;
        return;
    }
    try
    {
        if(!jTextFieldVeiculo.getText().equals(""))
        {
            ResultSet rs = servico.selectVeiculo(jTextFieldVeiculo.getText(), "1");
            if(rs.next() != false)
            {
                jTextFieldVeiculoNome.setText(rs.getString(2));
            }
            else
            {
                jTextFieldVeiculoNome.setText("Veículo não Encontrado!");
            }
        }
        else
        {
            jTextFieldVeiculoNome.setText("Veículo não Encontrado!");
        }
    } 
    catch (SQLException ex) 
    {
        Logger.getLogger(GerenciaCompetidor.class.getName()).log(Level.SEVERE, null, ex);
    }

}//GEN-LAST:event_jTextFieldVeiculoFocusLost

private void jTextFieldPilotoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPilotoFocusLost
    if (evt.getOppositeComponent() instanceof JOptionPane || evt.getOppositeComponent() instanceof JButton || clicouBotaoPesquisa == 1)
    {
        clicouBotaoPesquisa = 0;
        return;
    }
    try
    {
        if(!jTextFieldPiloto.getText().equals(""))
        {
            ResultSet rs = servico.selectPiloto(jTextFieldPiloto.getText(), "1");
            if (rs.next()) 
            {
                jTextFieldPilotoNome.setText(rs.getString(2));
                jTextFieldVeiculo.requestFocus();
            }
            else 
            {
                jTextFieldPilotoNome.setText("Piloto não Encontrado!");
            }
        }
        else
        {
            jTextFieldPilotoNome.setText("Piloto não Encontrado!");
        }
    }
    catch (SQLException ex) 
    {
        Logger.getLogger(GerenciaCompetidor.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_jTextFieldPilotoFocusLost

private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
    if (evt.getOppositeWindow() instanceof Competidor)
    {
        jButtonConsultaCompetidor.setVisible(true);
        preencherComboxCompeticao();
        preencherComboxCategoria();
        if(this.getTitle().equals("Inclusão de Competidor"))
        {
            jButtonConsultaCompetidor.setVisible(false);
            jTextFieldCodigo.setEditable(true);
            jComboBoxCompeticao.setEnabled(true);
            jComboBoxCategoria.setEnabled(true);
            jTextFieldPlaca.setEnabled(true);
            jTextFieldPiloto.setEnabled(true);
            jTextFieldVeiculo.setEnabled(true);
            jTextFieldCodigo.requestFocus();
        }
        else
        {
            if(this.getTitle().equals("Alteração de Competidor"))
            {
                jTextFieldCodigo.setEditable(false);
                jComboBoxCompeticao.setEnabled(true);
                jComboBoxCategoria.setEnabled(true);
                jTextFieldPlaca.setEnabled(true);
                jTextFieldPiloto.setEnabled(true);
                jTextFieldVeiculo.setEnabled(true);
                preencherDadosCompetidor();
            }
            else
            {
                if(this.getTitle().equals("Exclusão de Competidor"))
                {
                    jTextFieldCodigo.setEditable(false);
                    jComboBoxCompeticao.setEnabled(false);
                    jComboBoxCategoria.setEnabled(false);
                    jTextFieldPlaca.setEnabled(false);
                    jTextFieldPiloto.setEnabled(false);
                    jTextFieldVeiculo.setEnabled(false);
                    preencherDadosCompetidor();
                }
            }
        }
    }
}//GEN-LAST:event_formWindowActivated

/* Metodo responsável por preencher todos campos da tela de competidor.
 */    
private void preencherDadosCompetidor()
{
    try 
    {
            ResultSet rs = servico.selectCompetidor(codigo, categoria, competicao, "9");
            if((rs.next() == false) || (rs == null))
            {
                jTextFieldCodigo.setEditable(true);
                jTextFieldCodigo.requestFocus();
                retornoBotao(clikmenu, 1);
                JOptionPane.showMessageDialog(null,"Código não Encontrado.","Atenção",JOptionPane.INFORMATION_MESSAGE);
                jTextFieldCodigo.selectAll();
            }
            else
            {
                jTextFieldCodigo.setText(rs.getString(1));
                jComboBoxCompeticao.setSelectedItem(rs.getString(2));
                jComboBoxCategoria.setSelectedItem(rs.getString(3));
                jTextFieldPilotoNome.setText(rs.getString(4));
                jTextFieldVeiculoNome.setText(rs.getString(5));
                jTextFieldPlaca.setText(rs.getString(6));
                rs = servico.selectPiloto(jTextFieldPilotoNome.getText(), "2");

                if(rs.next())
                {
                    jTextFieldPiloto.setText(rs.getString(1));
                }
                
                rs = servico.selectVeiculo(jTextFieldVeiculoNome.getText(), "2");
                if(rs.next())
                {
                   jTextFieldVeiculo.setText(rs.getString(1));
                }
                else
                {
                    jTextFieldVeiculo.setText("dfijaoifa");
                }
                jComboBoxCompeticao.requestFocus();
            }
    }
    catch (SQLException ex) 
    {
        Logger.getLogger(GerenciaCompetidor.class.getName()).log(Level.SEVERE, null, ex);
    }
}


/* Metodo para saber em qual componente ira retornar o focus, apartir do menu
 * e do botao que foi acionado e neste metodo chama o metodo de Limpar
 */   
private void retornoBotao(String menu, int botao)
{
    limpar.limpajTextField(jTextFieldCodigo);
    limpar.limpajTextField(jTextFieldPlaca);
    limpar.limpajTextField(jTextFieldPiloto);
    limpar.limpajTextField(jTextFieldVeiculo);
    limpar.limpajTextField(jTextFieldPilotoNome);
    limpar.limpajTextField(jTextFieldVeiculoNome);
    if( (menu.equals("0")) && ( (botao == 0)))
    {        
        jComboBoxCompeticao.requestFocus();
    }
    else if ( (menu.equals("1")) || (menu.equals("2") || (botao == 1))) 
    {
        jTextFieldCodigo.setEditable(true);
        jTextFieldCodigo.requestFocus();
        jComboBoxCompeticao.setEnabled(true);
        jComboBoxCategoria.setEnabled(true);
        jTextFieldPlaca.setEnabled(true);
        jTextFieldPiloto.setEnabled(true);
        jTextFieldVeiculo.setEnabled(true);
    }
}   
    
private void jButtonFecharMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonFecharMouseClicked
    limpar(1);
    dispose();
}//GEN-LAST:event_jButtonFecharMouseClicked

private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
    codigo = null;
    retornoBotao(clikmenu, 1);
}//GEN-LAST:event_jButtonCancelarActionPerformed

private void jButtonConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarActionPerformed
    if(jTextFieldCodigo.getText().equals(""))
    {
        jTextFieldCodigo.requestFocus();
        JOptionPane.showMessageDialog(null, "Compo código não pode ficar vazio", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    if(jTextFieldPiloto.getText().equals(""))
    {
        jTextFieldPiloto.requestFocus();
        JOptionPane.showMessageDialog(null, "Campo Piloto não pode ficar vazio", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    if(jTextFieldVeiculo.getText().equals(""))
    {
        jTextFieldVeiculo.requestFocus();
        JOptionPane.showMessageDialog(null, "Campo Veículo não pode ficar vazio", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    else
    {
        if(jTextFieldPiloto.getText().equals(""))
        {
            jTextFieldPiloto.requestFocus();
            JOptionPane.showMessageDialog(null, "Campo Piloto não pode ficar vazio", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if(jTextFieldVeiculoNome.getText().equals("Veículo não Encontrado!"))
        {
            jTextFieldVeiculo.requestFocus();
            JOptionPane.showMessageDialog(null, "Digite código de um veículo cadastrado!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else
        {
                if(this.getTitle().equals("Inclusão de Competidor"))
                {
                    try {
                        ResultSet rscompeticao = servico.selectCompeticao(jComboBoxCompeticao.getSelectedItem().toString(), "6");
                        ResultSet rscategoria = servico.selectCategoria(jComboBoxCategoria.getSelectedItem().toString(), "4");
                        
                        if(rscompeticao.next())
                        {
                            System.out.print("deu certo");
                        }
                       if(rscategoria.next())
                       {
                        System.out.print("deu certo");   
                       }
                        int retorno = servico.insertCompetidor(jTextFieldCodigo.getText(), jTextFieldPiloto.getText(), jTextFieldVeiculo.getText(), rscompeticao.getString(1), rscategoria.getString(1), jTextFieldPlaca.getText());
                        if (retorno == 1) 
                        {
                            jTextFieldCodigo.setEditable(true);
                            limpar(1);
                            jTextFieldCodigo.requestFocus();
                            JOptionPane.showMessageDialog(null, "Competidor inserido com sucesso.");
                        }
                        else 
                        {
                            JOptionPane.showMessageDialog(null, "Competidor não pode ser inserido.");
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(GerenciaCompetidor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else if(this.getTitle().equals("Alteração de Competidor"))
                {
                        try {
                            ResultSet rscompeticao = servico.selectCompeticao(jComboBoxCompeticao.getSelectedItem().toString(), "6");
                            ResultSet rscategoria = servico.selectCategoria(jComboBoxCategoria.getSelectedItem().toString(), "4");
                            rscompeticao.next();
                            rscategoria.next();
                            int retorno = servico.updateCompetidor(jTextFieldCodigo.getText(), jTextFieldPiloto.getText(), jTextFieldVeiculo.getText(), rscompeticao.getString(1), rscategoria.getString(1), jTextFieldPlaca.getText());
                            if (retorno == 1) 
                            {
                                limpar(1);
                                JOptionPane.showMessageDialog(null, "Competidor Alterado com Sucesso!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                                jTextFieldCodigo.setEditable(true);
                                jTextFieldCodigo.requestFocus();
                            } 
                            else 
                            {
                                JOptionPane.showMessageDialog(null, "Competidor não pode ser alterado!", "Mensagem", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(GerenciaCompetidor.class.getName()).log(Level.SEVERE, null, ex);
                        }
                }
                else if(this.getTitle().equals("Exclusão de Competidor"))
                {
                    ResultSet rs = null;
                    try
                    {
                        ResultSet rscompeticao = servico.selectCompeticao(jComboBoxCompeticao.getSelectedItem().toString(), "6");
                        ResultSet rscategoria = servico.selectCategoria(jComboBoxCategoria.getSelectedItem().toString(), "4");
                        rscompeticao.next();
                        rscategoria.next();
                        //selecionar puxada para verificar se pode excluir ou não)
                        rs = servico.selectPuxada(jTextFieldCodigo.getText(), rscategoria.getString(1), rscompeticao.getString(1),"6");
                        if(rs.next() == true)
                        {
                            JOptionPane.showMessageDialog(this, "Competidor não pode ser Excluido. Existe uma puxada vinculada a esse Competidor.","Mensagem", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        else
                        {
                            int retorno = servico.deleteCompetidor(jTextFieldCodigo.getText(), jComboBoxCategoria.getSelectedItem().toString(), jComboBoxCompeticao.getSelectedItem().toString());
                            if (retorno == 1) 
                            {
                                retornoBotao(clikmenu, 1);
                                JOptionPane.showMessageDialog(null, "Competidor Excluído com Sucesso!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                            }
                            else 
                            {
                                JOptionPane.showMessageDialog(null, "Competidor não pode ser Excluído!", "Mensagem", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                    catch(SQLException ex) 
                    {
                        Logger.getLogger(ServicoBDAO.class.getName()).log(Level.SEVERE, null, ex);
                        return;
                    }
                    finally
                    {
                            try 
                            {
                                rs.close();
                                return;
                            } 
                            catch (SQLException ex) 
                            {
                                Logger.getLogger(GerenciaCategoria.class.getName()).log(Level.SEVERE, null, ex);
                            }
                    }
                }
            }
    }
}//GEN-LAST:event_jButtonConfirmarActionPerformed

private void jTextFieldCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldCodigoFocusLost
    if(evt.getOppositeComponent() instanceof JOptionPane || evt.getOppositeComponent() instanceof JButton || jTextFieldCodigo.getText().equals("") || clicouBotaoPesquisa == 1 && (!this.getTitle().equals("Exclusão de Competidor")))
    {
        clicouBotaoPesquisa = 0;
        return;
    }
    else
    {
        if(this.getTitle().equals("Exclusão de Competidor"))
        {
            jTextFieldCodigo.setEditable(false);
            jComboBoxCompeticao.setEnabled(false);
            jComboBoxCategoria.setEnabled(false);
            jTextFieldPlaca.setEnabled(false);
            jTextFieldPiloto.setEnabled(false);
            jTextFieldVeiculo.setEnabled(false);
            codigo = jTextFieldCodigo.getText();
            preencherDadosCompetidor();
            return;
        }
        if (this.getTitle().equals("Alteração de Competidor")) 
        {
            if (evt.getOppositeComponent() instanceof JButton) 
            {
                return;
            } 
            else 
            {
                jTextFieldCodigo.setEditable(false);
                jComboBoxCompeticao.setEnabled(true);
                jComboBoxCategoria.setEnabled(true);
                jTextFieldPlaca.setEnabled(true);
                jTextFieldPiloto.setEnabled(true);
                jTextFieldVeiculo.setEnabled(true);
                codigo = jTextFieldCodigo.getText();
                preencherDadosCompetidor();
            }
        }
        else
        {
            try
            {
                ResultSet rs = servico.selectCompetidor(jTextFieldCodigo.getText(), jComboBoxCategoria.getSelectedItem().toString(), jComboBoxCompeticao.getSelectedItem().toString(), "9");
                if(rs.next() != false)
                {
                    jTextFieldVeiculoNome.setText(rs.getString(1));
                    jTextFieldCodigo.requestFocus();
                    jTextFieldCodigo.selectAll();
                    JOptionPane.showMessageDialog(null, "Código de veículo já cadastrado.");
                }
                else
                {
                    jTextFieldCodigo.setEditable(false);
                }
            }
            catch (SQLException ex) 
            {
                Logger.getLogger(ServicoBDAO.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}//GEN-LAST:event_jTextFieldCodigoFocusLost

private void jButtonConsultaPilotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaPilotoActionPerformed
    clicouBotaoPesquisa = 1;
    jTextFieldPiloto.requestFocus();
    ConsultaPiloto consultaPiloto = new ConsultaPiloto(null, true);
    consultaPiloto.setVisible(true);
    if(consultaPiloto.codigo != -1)
    {
        jTextFieldPiloto.setText(Integer.toString(consultaPiloto.codigo));
        jTextFieldPiloto.requestFocus();
        jTextFieldPiloto.transferFocus();
    }
}//GEN-LAST:event_jButtonConsultaPilotoActionPerformed

private void jButtonConsultaVeiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaVeiculoActionPerformed
    clicouBotaoPesquisa = 1;
    jTextFieldVeiculo.requestFocus();
    ConsultaVeiculo consultaVeiculo = new ConsultaVeiculo(null, true);
    consultaVeiculo.setVisible(true);
    if(consultaVeiculo.codigo != -1)
    {
        jTextFieldVeiculo.setText(Integer.toString(consultaVeiculo.codigo));
        jTextFieldVeiculo.transferFocus();
    }
}//GEN-LAST:event_jButtonConsultaVeiculoActionPerformed

private void jButtonConsultaCompetidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaCompetidorActionPerformed
    clicouBotaoPesquisa = 1;
    retornoBotao(clikmenu, 1);
    ConsultaCompetidor consultaCompetidor = new ConsultaCompetidor(null, true);
    consultaCompetidor.setVisible(true);
    jTextFieldCodigo.setEditable(true);
    if(consultaCompetidor.codigo != -1)
    {
        jTextFieldCodigo.setText(Integer.toString(consultaCompetidor.codigo));
        jTextFieldCodigo.transferFocus();
    }
}//GEN-LAST:event_jButtonConsultaCompetidorActionPerformed
    
private void limpar(int p)
{
        limpar.limpajTextField(jTextFieldCodigo);
        limpar.limpajTextField(jTextFieldPlaca);
        limpar.limpajTextField(jTextFieldPiloto);
        limpar.limpajTextField(jTextFieldVeiculo);
        limpar.limpajTextField(jTextFieldPilotoNome);
        limpar.limpajTextField(jTextFieldVeiculoNome);
}

private void preencherComboxCompeticao()
{
    ResultSet rs = servico.selectCompeticao("0", "0");
    if(rs != null)
    {
        try
        {
            jComboBoxCompeticao.removeAllItems();
            while(rs.next())
            {
                jComboBoxCompeticao.addItem(rs.getString(2));           
            }
        }
        catch (SQLException ex) {
            Logger.getLogger(ServicoBDAO.class.getName()).log(Level.SEVERE, null, ex);
        }   
    }
    else
    {
        JOptionPane.showMessageDialog(null, "É necessário cadastrar uma Competiçao.");
    }
}

private void preencherComboxCategoria()
{
    
    ResultSet rs = servico.selectCategoria("0", "0");
    if(rs != null)
    {
        try
        {
            jComboBoxCategoria.removeAllItems();
            while(rs.next())
            {
                jComboBoxCategoria.addItem(rs.getString(2));           
            }
        }
        catch (SQLException ex) {
            Logger.getLogger(ServicoBDAO.class.getName()).log(Level.SEVERE, null, ex);
        }   
    }
    else
    {
        JOptionPane.showMessageDialog(null, "É necessário cadastrar uma Categoria.");
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GerenciaCompetidor dialog = new GerenciaCompetidor(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    private void centralizar(){  
      /* Função para centralizar janela na tela */  
       Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();  
       Dimension frameSize = getSize();  
       setLocation(new Point((screenSize.width - frameSize.width) / 2,  
                             (screenSize.height - frameSize.width) / 2));  
    }  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonConfirmar;
    private javax.swing.JButton jButtonConsultaCompetidor;
    private javax.swing.JButton jButtonConsultaPiloto;
    private javax.swing.JButton jButtonConsultaVeiculo;
    private javax.swing.JButton jButtonFechar;
    private javax.swing.JComboBox jComboBoxCategoria;
    private javax.swing.JComboBox jComboBoxCompeticao;
    private javax.swing.JLabel jLabelCategoria;
    private javax.swing.JLabel jLabelCodigo;
    private javax.swing.JLabel jLabelCompeticao;
    private javax.swing.JLabel jLabelPiloto;
    private javax.swing.JLabel jLabelPlaca;
    private javax.swing.JLabel jLabelVeiculo;
    private javax.swing.JTextField jTextFieldCodigo;
    private javax.swing.JTextField jTextFieldPiloto;
    private javax.swing.JTextField jTextFieldPilotoNome;
    private javax.swing.JTextField jTextFieldPlaca;
    private javax.swing.JTextField jTextFieldVeiculo;
    private javax.swing.JTextField jTextFieldVeiculoNome;
    // End of variables declaration//GEN-END:variables
   
    FormPesquisa formPesquida = new FormPesquisa();
    ServicoBDAO servico = new ServicoBDAO();
    public String clikmenu;  
    Limpar limpar = new Limpar();
    public String codigo;
    //usado para consultar competidor ao clicar no botão alterar ou excluir
    public String categoria;
    //usado para consultar competidor ao clicar no botão alterar ou excluir
    public String competicao;
    private int clicouBotaoPesquisa = 0;
}
